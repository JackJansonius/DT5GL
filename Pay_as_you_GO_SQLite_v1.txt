



SQLite_database: "Database/Pay_as_you_GO.sqlite3"

Table 0: 
If:                                              | 0| 1|
'Next Client'                                    | Y| N|
Then:                                                
report is finished                               |  | X|
# .......


Proposition: 'Next Client'
Obtain_instance_from_database_view: Client


Database_view: Client
With_attributes:
Name, Input1, Input2, Input3
Query:
SELECT Name, Input1, Input2, Input3
  FROM Client
 LIMIT 1 OFFSET %s  
With_arguments: Client.auto_index   



Table 0: Payments
If:                                         | 0| 1| 2| 3| 4| 5| 6|
units_in_tier3 > 0                          | Y| Y| Y| N| N| N| N| 
units_in_tier2 > 0                          | Y| Y| N| Y| Y| N| N|
units_in_tier1 > 0                          | Y| N| -| Y| N| Y| N|
Then:
report is tier3+tier2+tier1                 | X|  |  |  |  |  |  |
report is tier3+tier2                       |  | X|  |  |  |  |  |
report is tier3                             |  |  | X|  |  |  |  |
report is tier2+tier1                       |  |  |  | X|  |  |  |
report is tier2                             |  |  |  |  | X|  |  |
report is tier1                             |  |  |  |  |  | X|  |  
report is notier                            |  |  |  |  |  |  | X|
report is altiers                           | X| X| X| X| X| X| X|
# .......

# with thanks to Dr. Bob Moore's excellent analysis:
# D =A7 - C7 
# E =B7 - C7 
# F =MAX(Free_Units-D7, 0) 
# G =IF(C7 - I7 - H7 < F7, 0, C7 - I7 - H7 - F7)
# H =IF(E7 > Tier_2, C7 - I7, IF(B7 > Tier_2, B7 - I7 - Tier_2, 0))
# I =IF(E7 > Tier_3, C7, IF(B7 > Tier_3, B7 -Tier_3, 0)) 

Attribute: TotalUnitsAtStartLastHour     Type: Integer 
Equals: input1 - input3

Attribute: UnitsInMonthAtStartLastHour   Type: Integer
Equals: input2 - input3

Attribute: FreeUnitsAtStartLastHour      Type: Integer 
Equals: max(Free_Units - TotalUnitsAtStartLastHour, 0)

Attribute: units_in_tier1   
Equals: 0 if input3 - units_in_tier3 - units_in_tier2 < FreeUnitsAtStartLastHour \
        else input3 - units_in_tier3 - units_in_tier2 - FreeUnitsAtStartLastHour

Attribute: units_in_tier2
Equals: input3 - units_in_tier3 if UnitsInMonthAtStartLastHour > Tier_2   \ 
        else input2 - units_in_tier3 - Tier_2 if input2 > Tier_2          \
        else 0                 

Attribute: units_in_tier3
Equals: input3 if UnitsInMonthAtStartLastHour > Tier_3  \
        else input2 - Tier_3 if input2 > Tier_3         \
        else 0

Attribute: Free_Units  Type: Integer 
Equals: 10000
Attribute: Tier_2      Type: Integer 
Equals: 20000
Attribute: Tier_3      Type: Integer 
Equals: 50000

Attribute: input1      Type: Integer 
Obtain_value_from_database_view: Client.Input1

Attribute: input2         Type: Integer 
Obtain_value_from_database_view: Client.Input2

Attribute: input3      Type: Integer
Obtain_value_from_database_view: Client.Input3



GoalAttribute: report
Multivalued_until: finished
Repeat_until: finished

Case: finished
Print: "Finished"

Case: tier3+tier2+tier1
Print: "Naam client..: %s"    Client.Name
Print: "tier3+tier2+tier1" 
Print: "Units in tier 1: %s" units_in_tier1
Print: "Units in tier 2: %s" units_in_tier2
Print: "Units in tier 3: %s" units_in_tier3

Case: tier3+tier2
Print: "Naam client..: %s"    Client.Name
Print: "tier3+tier2" 
Print: "Units in tier 2: %s" units_in_tier2
Print: "Units in tier 3: %s" units_in_tier3

Case: tier3
Print: "Naam client..: %s"    Client.Name
Print: "tier3" 
Print: "Units in tier 3: %s" units_in_tier3

Case: tier2+tier1
Print: "Naam client..: %s"    Client.Name
Print: "tier2+tier1" 
Print: "Units in tier 1: %s" units_in_tier1
Print: "Units in tier 2: %s" units_in_tier2

Case: tier2
Print: "Naam client..: %s"    Client.Name
Print: "tier2" 
Print: "Units in tier 2: %s" units_in_tier2

Case: tier1
Print: "Naam client..: %s"    Client.Name
Print: "tier1" 
Print: "Units in tier 1: %s" units_in_tier1

Case: notier
Print: "Naam client..: %s"    Client.Name
Print: "notier" 

Case: altiers
Print: "********* Derived data from input *********"
Print: "All units to start hour...........: %s" TotalUnitsAtStartLastHour
Print: "Units in month to start hour......: %s" UnitsInMonthAtStartLastHour
Print: "Free units remaining at start hour: %s" FreeUnitsAtStartLastHour
Print: "-------------------------------------------" 
Print: "  " 




--Initial_database_setup: delete_clients
Query:
    DELETE FROM Client
End_Query

--Initial_database_setup: insert_new_borrowers
Query:
    INSERT INTO Client 
     (Name, Input1, Input2, Input3) 
    VALUES
    ('TC1',       2000,   2000,    160),
    ('TC2',      10200,  10200,    350),
    ('TC3',      25600,   8678,   1234),
    ('TC4',       1500,   1500,   1500),
    ('TC5',      22000,  22000,  20500),
    ('TC6',      32500,  32500,  10500),
    ('TC7',      55600,  20500,    700),
    ('TC8',      85600,  25700,   1500),
    ('TC9',     120258,  60390,   2350),
    ('TC10',    120000, 120000, 120000)
End_Query





